from yacs.config import CfgNode as CN

_C = CN()

_C.WORK_DIR = ""  # save model chechkpoint and traning log to work_dir

# Random seed
_C.RANDOM_SEED = 888

# -----------------------------------------------------------------------------
# MODEL
# -----------------------------------------------------------------------------
_C.MODEL = CN()
_C.MODEL.TYPE = 'general_recognizer'  # "general_recognizer"

_C.MODEL.BACKBONE = CN()
_C.MODEL.BACKBONE.TYPE = "resnet18"  # backbone: ResNet
_C.MODEL.BACKBONE.PRETRAINED = False
_C.MODEL.BACKBONE.OUT_DIM = 512

_C.MODEL.NECK = CN()
_C.MODEL.NECK.TYPE = ""
_C.MODEL.NECK.INPUT_DIM = 0
_C.MODEL.NECK.OUTPUT_DIM = 0
_C.MODEL.NECK.HIDDEN_DIMS = []
_C.MODEL.NECK.ACTIVATION = 'relu'
_C.MODEL.NECK.DROPOUT = 0.0

_C.MODEL.HEAD = CN()
_C.MODEL.HEAD.TYPE = "fc"
_C.MODEL.HEAD.INPUT_DIM = 5120
_C.MODEL.HEAD.OUTPUT_DIM = 100
_C.MODEL.HEAD.HIDDEN_DIMS = []
_C.MODEL.HEAD.ACTIVATION = 'relu'
_C.MODEL.HEAD.DROPOUT = 0.0


_C.MODEL.LOAD_FROM = ""

_C.MODEL.DISCRIMINATOR = CN()
_C.MODEL.DISCRIMINATOR.TYPE = "fc"
_C.MODEL.DISCRIMINATOR.INPUT_DIM = 512
_C.MODEL.DISCRIMINATOR.OUTPUT_DIM = 5
_C.MODEL.DISCRIMINATOR.HIDDEN_DIMS = [512,]
_C.MODEL.DISCRIMINATOR.ACTIVATION = 'relu'
_C.MODEL.DISCRIMINATOR.DROPOUT = 0.0
_C.MODEL.DISCRIMINATOR.NUM_HEAD = 1
_C.MODEL.DISCRIMINATOR.MERGE_TARGET = False
_C.MODEL.DISCRIMINATOR.PAIRWISE_TARGET = False

_C.MODEL.TARGET = CN()
_C.MODEL.TARGET.DISCRIMINATOR = CN()
_C.MODEL.TARGET.DISCRIMINATOR.TYPE = "fc"
_C.MODEL.TARGET.DISCRIMINATOR.INPUT_DIM = 512
_C.MODEL.TARGET.DISCRIMINATOR.OUTPUT_DIM = 5
_C.MODEL.TARGET.DISCRIMINATOR.HIDDEN_DIMS = [512,]
_C.MODEL.TARGET.DISCRIMINATOR.ACTIVATION = 'relu'
_C.MODEL.TARGET.DISCRIMINATOR.DROPOUT = 0.0
_C.MODEL.TARGET.DISCRIMINATOR.NUM_HEAD = 1

_C.MODEL.DOMAIN_CLASSIFIER = CN()
_C.MODEL.DOMAIN_CLASSIFIER.TYPE = "fc"
_C.MODEL.DOMAIN_CLASSIFIER.INPUT_DIM = 512
_C.MODEL.DOMAIN_CLASSIFIER.OUTPUT_DIM = 5
_C.MODEL.DOMAIN_CLASSIFIER.HIDDEN_DIMS = [512,]
_C.MODEL.DOMAIN_CLASSIFIER.ACTIVATION = 'relu'
_C.MODEL.DOMAIN_CLASSIFIER.DROPOUT = 0.0

_C.MODEL.DOMAIN_CLASSIFIER_WEIGHTED_START_EPOCH = 5


# for distillation
_C.MODEL.TEACHER = CN()
_C.MODEL.TEACHER.TYPE = 'general_recognizer'
_C.MODEL.TEACHER.BACKBONE = CN()
_C.MODEL.TEACHER.BACKBONE.TYPE = "resnet50"  # backbone: ResNet
_C.MODEL.TEACHER.BACKBONE.PRETRAINED = False
_C.MODEL.TEACHER.BACKBONE.OUT_DIM = 2048


_C.MODEL.TEACHER.NECK = CN()
_C.MODEL.TEACHER.NECK.TYPE = ""
_C.MODEL.TEACHER.NECK.INPUT_DIM = 512
_C.MODEL.TEACHER.NECK.OUTPUT_DIM = 512
_C.MODEL.TEACHER.NECK.HIDDEN_DIMS = []
_C.MODEL.TEACHER.NECK.ACTIVATION = 'relu'
_C.MODEL.TEACHER.NECK.DROPOUT = 0.0

_C.MODEL.TEACHER.HEAD = CN()
_C.MODEL.TEACHER.HEAD.TYPE = "fc"
_C.MODEL.TEACHER.HEAD.INPUT_DIM = 512
_C.MODEL.TEACHER.HEAD.OUTPUT_DIM = 100
_C.MODEL.TEACHER.HEAD.HIDDEN_DIMS = []
_C.MODEL.TEACHER.HEAD.ACTIVATION = 'relu'
_C.MODEL.TEACHER.HEAD.DROPOUT = 0.0

_C.MODEL.TEACHER.DISCRIMINATOR = CN()
_C.MODEL.TEACHER.DISCRIMINATOR.TYPE = "fc"
_C.MODEL.TEACHER.DISCRIMINATOR.NUM_HEAD = 1
_C.MODEL.TEACHER.DISCRIMINATOR.INPUT_DIM = 512
_C.MODEL.TEACHER.DISCRIMINATOR.OUTPUT_DIM = 5
_C.MODEL.TEACHER.DISCRIMINATOR.HIDDEN_DIMS = [512,]
_C.MODEL.TEACHER.DISCRIMINATOR.ACTIVATION = 'relu'
_C.MODEL.TEACHER.DISCRIMINATOR.DROPOUT = 0.0
_C.MODEL.TEACHER.DISCRIMINATOR.MERGE_TARGET = False

_C.MODEL.TEACHER.DOMAIN_CLASSIFIER = CN()
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.TYPE = "fc"
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.NUM_HEAD = 1
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.INPUT_DIM = 512
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.OUTPUT_DIM = 5
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.HIDDEN_DIMS = [512,]
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.ACTIVATION = 'relu'
_C.MODEL.TEACHER.DOMAIN_CLASSIFIER.DROPOUT = 0.0

_C.MODEL.TEACHER.DOMAIN_CLASSIFIER_WEIGHTED_START_EPOCH = 5

_C.MODEL.TEACHER.LOAD_FROM = ""
_C.MODEL.TEACHER.FREEZE_BACKBONE = False
_C.MODEL.TEACHER.QUEUE_SIZE = 1024
_C.MODEL.TEACHER.USE_REWEIGHT = True
_C.MODEL.TEACHER.MERGE_TARGETS = True
_C.MODEL.TEACHER.MERGE_SOURCE = False
_C.MODEL.TEACHER.MULTI_TARGET = False
_C.MODEL.TEACHER.TARGET_ORIENTED = False

# -----------------------------------------------------------------------------
# DATASET
# -----------------------------------------------------------------------------
_C.DATASET = CN()
_C.DATASET.NUM_CLASS = 31
_C.DATASET.CLASS_LIST_PATH = 'data/office31/classes.txt'
_C.DATASET.DATASET_MAPPING_PATH = 'data/office31/mapping.json'
_C.DATASET.ID2CLASS_MAPPING_PATH = 'data/office31/id2class_mapping.json'
_C.DATASET.ID2DOMAIN_MAPPING_PATH = 'data/office31/id2domain_mapping.json'

_C.DATASET.DATASET_NAME = 'office31'
_C.DATASET.DATAROOT = '/media/exx/HDD/linz/datasets/office31'
_C.DATASET.IMAGELIST_ROOT = 'data/office31'

_C.DATASET.SOURCE = CN()
_C.DATASET.SOURCE.DOMAIN_NAMES = []
_C.DATASET.TARGET = CN()
_C.DATASET.TARGET.DOMAIN_NAMES = []


# -----------------------------------------------------------------------------
# LOSS
# -----------------------------------------------------------------------------
_C.LOSS = CN()
_C.LOSS.TYPE = 'ce'  # "cross_entropy"
_C.LOSS.SRC_CLS_WEIGHT = 1.0
_C.LOSS.DOMAIN_DISC_WEIGHT = 1.0
_C.LOSS.MINIMIZE_ENTROPY = False

_C.LOSS.GRAD_REGULARIZATION_WEIGHT = 0.1
_C.LOSS.GRAD_REGULARIZATION_METHOD = 'l1' # l2

_C.LOSS.BALANCE_DA_LOSS = False
_C.LOSS.SRC_DOM_LOSS_WEIGHT = 0.5
_C.LOSS.DOMAIN_ENTROPY_WEIGHT = 1.0

_C.LOSS.DOMAIN_PROB_WEIGHTING = False

_C.LOSS.CHEAT_DOM = -1
_C.LOSS.CHEAT_DOM_WEIGHT = 1.0

_C.LOSS.INDOM_AUX_LOSS_WEIGHT = 0.5
_C.LOSS.INDOM_AUX_LOSS_HARD_FACTOR = 1.0



# -----------------------------------------------------------------------------
# TRAIN
# -----------------------------------------------------------------------------
_C.TRAIN = CN()
_C.TRAIN.NUM_EPOCH = 100
_C.TRAIN.LABELED_BATCH_SIZE = 32 # historic reasons
_C.TRAIN.BATCH_SIZE = 128
_C.TRAIN.NUM_WORKER = 4
_C.TRAIN.VAL_EPOCH = 1
_C.TRAIN.ITER_REPORT = 50
_C.TRAIN.TRAIN_TEACHER = False


_C.TRAIN.TARGET = CN()
_C.TRAIN.TARGET.LABELED = CN()
_C.TRAIN.TARGET.LABELED.BATCH_SIZE = 8
_C.TRAIN.TARGET.LABELED.NUM_WORKER = 0
_C.TRAIN.TARGET.UNLABELED = CN()
_C.TRAIN.TARGET.UNLABELED.BATCH_SIZE = 8
_C.TRAIN.TARGET.UNLABELED.NUM_WORKER = 4


# domain adapted trainer
_C.TRAIN.DOMAIN_ADAPTED_START_EPOCH = 0
_C.TRAIN.DOMAIN_ADAPTED_INTERVAL = 1
_C.TRAIN.DOMAIN_ADAPTED_MOMENTUM = 0.999





# -----------------------------------------------------------------------------
# VAL
# -----------------------------------------------------------------------------
_C.VAL = CN()
_C.VAL.BATCH_SIZE = 128
_C.VAL.NUM_WORKER = 4


# -----------------------------------------------------------------------------
# SOLVER
# -----------------------------------------------------------------------------

_C.SOLVER = CN()
_C.SOLVER.OPTIMIZER = "sgd" # sgd, adam
_C.SOLVER.LR = 0.001
_C.SOLVER.BACKBONE_LR_RESCALE = 0.1
_C.SOLVER.WEIGHT_DECAY = 0.0005
_C.SOLVER.SCHEDULER = "LambdaLR"  # "CosineAnnealingLR_with_Restart" / "LambdaLR" / ""

# CosineAnnealingLR_with_Restart
_C.SOLVER.COSINEANNEALINGLR = CN()
_C.SOLVER.COSINEANNEALINGLR.T_MAX = 1
_C.SOLVER.COSINEANNEALINGLR.T_MULT = 1.0


# -----------------------------------------------------------------------------
# SAMPLER
# -----------------------------------------------------------------------------
_C.SAMPLER = CN()
_C.SAMPLER.TYPE = ""
_C.SAMPLER.STAGE_BUDGET = 100.0
_C.SAMPLER.NUM_STAGE = 5
_C.SAMPLER.VISUALIZE = False
_C.SAMPLER.VISUALIZE_NUM_PER_DOMAIN = 3
_C.SAMPLER.RESUME_FROM_LAST_STAGE = 0

# entropy
_C.SAMPLER.ENTROPY = CN()
_C.SAMPLER.ENTROPY.SOFTMAX_T = 1.0

# clue
_C.SAMPLER.CLUE = CN()
_C.SAMPLER.CLUE.SOFTMAX_T = 0.1

_C.SAMPLER.DOMAIN_T = 1.0

# domain distance weighted
_C.SAMPLER.DOMAIN_DIST_WEIGHTS_SCALARS = [0.8, 0.8, 0.8, 0.8, 0.8]
_C.SAMPLER.DOMAIN_DIST_SRC_RATES = [1, 1, 1, 1, 1]
_C.SAMPLER.DOMAIN_DIST_TGT_RATES = [-1, -1, -1, -1, -1]
_C.SAMPLER.DOMAIN_DIST_TYPE = 'mean'
_C.SAMPLER.DOMAIN_DIST_AGG_TYPE = 'mean'
_C.SAMPLER.DOMAIN_PROTOTYPE = 'all'
_C.SAMPLER.DOMAIN_PROTOTYPE_NUM = 1

# ud-weighted
_C.SAMPLER.UDW = CN()
_C.SAMPLER.UDW.UNCERTAINTY_NORM = 0.02
_C.SAMPLER.UDW.DIVERSITY_NORM = 40.0
_C.SAMPLER.UDW.FILTER_METHOD = 'random'
_C.SAMPLER.UDW.FILTER_NUM = 1000
_C.SAMPLER.UDW.NORM_STD_SCALE = 3.0
_C.SAMPLER.UDW.D_METHOD = 'l2'
_C.SAMPLER.UDW.U_WEIGHT = 1.0
_C.SAMPLER.UDW.D_WEIGHT = 1.0
# feat domain filter
_C.SAMPLER.UDW.FEAT_DOMAIN_FILTER = CN()
_C.SAMPLER.UDW.FEAT_DOMAIN_FILTER.SAMPLE_METHOD = 'random'
_C.SAMPLER.UDW.FEAT_DOMAIN_FILTER.SAMPLE_NUM = 10000000
_C.SAMPLER.UDW.FEAT_DOMAIN_FILTER.DIST_AGG_METHOD = 'avg'

_C.SAMPLER.DOMAIN_CONSISTENT_ENTROPY = CN()
_C.SAMPLER.DOMAIN_CONSISTENT_ENTROPY.AGG = 'sum'
_C.SAMPLER.DOMAIN_CONSISTENT_ENTROPY.DOMAIN_CONSISTENCY_WEIGHT = 1.0
_C.SAMPLER.DOMAIN_CONSISTENT_ENTROPY.DOMAIN_CONSISTENCY_CLIP = 0.5

_C.SAMPLER.DOMAIN_EXPERT_ENTROPY = CN()
_C.SAMPLER.DOMAIN_EXPERT_ENTROPY.DOMAIN_EXPERT_WEIGHT = 1.0

_C.SAMPLER.DOMAIN_DIST_AVG_DIVERSITY = CN()
_C.SAMPLER.DOMAIN_DIST_AVG_DIVERSITY.FEAT_METRIC = 'feat'
_C.SAMPLER.DOMAIN_DIST_AVG_DIVERSITY.AGG = 'avg'

_C.SAMPLER.DENSITY = CN()
_C.SAMPLER.DENSITY.KNN = 30

_C.SAMPLER.FEATGRAD = CN()
_C.SAMPLER.FEATGRAD.DOM_WEIGHTED = False
_C.SAMPLER.FEATGRAD.DOM_GRAD_MERGE = 'sum'
_C.SAMPLER.FEATGRAD.DIST_METRIC = 'l2'
_C.SAMPLER.FEATGRAD.NUM_CLS = 1
_C.SAMPLER.FEATGRAD.GRAD_AGG = 'sum'
_C.SAMPLER.FEATGRAD.PRED_WEIGHT = False

_C.SAMPLER.SEMI = CN()
_C.SAMPLER.SEMI.PROPOGATE_METHOD = 'knn'
_C.SAMPLER.SEMI.NN_K = 5


_C.SAMPLER.DANN = CN()
_C.SAMPLER.DANN.APPLY_STAGE = 5
_C.SAMPLER.DANN.AGG = 'cos' # 'lr', 'norm'
_C.SAMPLER.DANN.NORMALIZATION = 'max'
_C.SAMPLER.DANN.NORMALIZATION_LEVEL = 'all'
_C.SAMPLER.DANN.IS_DOMAINWISE = False
_C.SAMPLER.DANN.IS_CLASSWISE = False

_C.SAMPLER.DANN.DANNGRAD_WEIGHT = 1.0
_C.SAMPLER.DANN.ENTROPY_WEIGHT = 1.0

_C.SAMPLER.DANN.CLS_GRAD_TAU = 1.0
_C.SAMPLER.DANN.DOM_GRAD_TAU = 1.0

_C.SAMPLER.DANN.CLS_TOPK = 1

_C.SAMPLER.DANN.ENTMAX_TO_SRC_LOSS_WEIGHT = 1.0


_C.SAMPLER.CDAN = CN()
_C.SAMPLER.CDAN.APPLY_STAGE = 5
_C.SAMPLER.CDAN.AGG = 'cos' # 'lr', 'norm'
_C.SAMPLER.CDAN.NORMALIZATION = 'max'
_C.SAMPLER.CDAN.NORMALIZATION_LEVEL = 'all'
_C.SAMPLER.CDAN.IS_DOMAINWISE = False
_C.SAMPLER.CDAN.IS_CLASSWISE = False

_C.SAMPLER.CDAN.CDANGRAD_WEIGHT = 1.0
_C.SAMPLER.CDAN.ENTROPY_WEIGHT = 1.0

_C.SAMPLER.CDAN.CLS_GRAD_TAU = 1.0
_C.SAMPLER.CDAN.DOM_GRAD_TAU = 1.0

_C.SAMPLER.CDAN.CLS_TOPK = 1



_C.SAMPLER.MMD = CN()
_C.SAMPLER.MMD.MODE = 'target-to-source' # 'target-to-all'
_C.SAMPLER.MMD.APPLY_STAGE = 5
_C.SAMPLER.MMD.AGG = 'cos' # 'lr', 'norm'
_C.SAMPLER.MMD.NORMALIZATION = 'max'
_C.SAMPLER.MMD.NORMALIZATION_LEVEL = 'all'
_C.SAMPLER.MMD.IS_DOMAINWISE = False
_C.SAMPLER.MMD.IS_CLASSWISE = False

_C.SAMPLER.MMD.MMDGRAD_WEIGHT = 1.0
_C.SAMPLER.MMD.ENTROPY_WEIGHT = 1.0

_C.SAMPLER.MMD.CLS_GRAD_TAU = 1.0
_C.SAMPLER.MMD.DOM_GRAD_TAU = 1.0

_C.SAMPLER.MMD.CLS_TOPK = 1


_C.SAMPLER.CLUSTER_METHOD = 'kmeans' # kmeans++
_C.SAMPLER.WEIGHT_RESCALE_CENTER = 'mean' # 'median', '0.5'
_C.SAMPLER.WEIGHT_RESCALE_FACTOR = 10.0
_C.SAMPLER.USE_WEIGHT_RESCALE = False

_C.SAMPLER.SELECT_FROM_DOMAIN = 0

_C.SAMPLER.FIRST_STAGE_METHOD = 'random'
_C.SAMPLER.FIRST_STAGE_SAMPLE_NUM = -1
_C.SAMPLER.SECOND_STAGE_METHOD = 'random'
_C.SAMPLER.DISCRIM_TYPE = 'cdan'

_C.SAMPLER.RANDOM_CAND_MAX_NUM = 50000

_C.SAMPLER.PRE_CLUSTER_SIZE = 0

_C.SAMPLER.CLASS_DOMINANT_GAP = 0.









cfg = _C

# test
if __name__ == "__main__":
	cfg.merge_from_file("config/test.yaml")
	cfg.freeze()
	
	cfg2 = cfg.clone()
	cfg2.defrost()
	cfg2.MODEL.PREDICTOR.NUM_CLASSES = 8
	cfg2.freeze()
	
	print("cfg:")
	print(cfg)
	print("cfg2:")
	print(cfg2)
